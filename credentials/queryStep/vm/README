


Acronims






Definition of each Folder


DevEnvironmentWithVagrant

- Getting Started with Vagrant:
	background
- Managing Vagrant Boxes and Projects:
	installation, configuration
- Provisioning with Puppets: 
	provisioning tool -> manifests
- Provisioning with Chef:
	provisioning tool -> receipts
- Provisioning with Vagrant using Puppet and Chef:
	development environments
- Working with Multiple Machines:
	multiple virtual machines communicates with each other
- Creating Your Own Box:
	custom base box 




- Required: 
	linux
	virtual box
- Target:
	software developer
	dev managers
	tech team leader


>vagrat init precise64 http://ftp.*.box


git clone && vagrant init

Chapt1:
	requirements Vagrant
	install Vagrant
	install vBox
	verify Vagrant installation is correct




# Getting Installed
	# vbox: https://www.virtualbox.org/wiki/Downloads
	# vagrant: https://www.vagrantup.com/downloads.html 
		:: tutorial is using 	1.2.2
		:: my version 			1.4.3

	# alternative:
		http://www.aptgetlife.co.uk/installing-vagrant-on-linux-mint/

ok



Chapt2:
	Creating Vagrant Projects
		:: Vagrant-controlled:
				port forwarding
				folder mapping
				networking
		create new project with a named base box...
		*Vagrantfile : configuration file define:
			how use project
			what op system
			what vm boot up
			what sync folder
			what port forwared
			what ...
		*Each VM starts with a BASE_BOX, this is a specially packaged version of a operating system with some specific configuration in place.
		* Config tools -> similar to package.json of nodejs -> things to install to the server here instead is a full operating system with min functionalities

	Step 0: be in the directory where we want to intiate a Vagrant project
		# Creating projects without importing a base box
		vagrant init base64
		# create empty project
		vagrant init base64 [FallbackURL-Intended-for-Sharing]

		# Managint Vagrant Boxes
		vagrant box --help

	
		vagrant box add <name> <url> [--provider provider] [--force]
		vagrant box list
		vagrant box remove <name> <provider>
		vagrant box repackage <name> <provider>


-> vagrant box add precise64 http://files.vagrantup.com/precise64.box --force
		add :: allows to add new box, 
				--force [overwrite pre existing box]
				--provider [specify alternative provider] :: default vbox, vmware, amazon-s3
			:: most of the boxes will be at least 200MB big, once downloaded it will be available to use for future vagrant projects, such as node npm

-> vagrant box list
		list :: show all boxes available within vagrant

-> vagrant box remove lucid32 virtualbox
		remove :: get rid of an box


-> vagrant box repackage ... ... -> todo chapter7: custom boxes

# Finding Vagrant boxes
	Lucid32 is available at http://files.vagrantup.com/lucid32.box
	Lucid64 is available at http://files.vagrantup.com/lucid64.box
	Precise32 is available at http://files.vagrantup.com/precise32.box
	Precise64 is available at http://files.vagrantup.com/precise64.box

# Controlling guest machines
	-> Vagrantfile --> define the configuration for the project
# Power up Vmachine 
	-> 1st check if previous env is suspended -> then resume
	-> 2nd check if box already downloaded onto the machine -> if not then download

	--> Steps to run:
		+copy the base box
		+create VM with relevant provider (default virtualbox)
		+forward configured port, 
			default 22(SSH) to vm 2222() create chanel from host to remote(VM)
		+boot the VM
		+config network
		+map shared folders between Host & VM, 
			default Host -> rootfolder of vagrant project -> /vagrant at VM
		+setup provisioning tool:
			Puppet
			Chef
			SSH

	--> cmd :::
		 	vagrant up			::  
		 	vagrant suspend 	:: 	save curr state of VM to DISK, (free cpu)
		 	vagrant resume		::	launch suspended VM
		 	vagrant halt	 	::  stops all runing process and shut down
		 	vagrant destroy		::  force quit vagrant box
		 	vagrant ssh 		:: 	ssh client to VM

# Integration between the host and the guest
	+--> Port Forwarding :: VM -> ===tunnel=== -> Host
		:: use :: Vagrant webserver at port 8888 -> Host render page at localhost:8888
		:: Vagrantfile << config.vm.network :forward_port, guest: 80 host: 8888
	---> Port Collision Hotfix ::
		:: use VM1 & VM2 using same port of HOST
		:: Vagrantfile << config.vm.network :forward_port, guest: 80 host: 8888, auto_correct: true  
	---> Port Permsion ::  below certain range need root permision!!!
	
	+--> Synced folders
		:: use :: Vagrant and Client shared folder
		:: Vagrantfile << config.vm.synced_folder "/LocalPath/" "/RemotePath/"
	---> Path Relativity ::
		:: local relative path be from the project
		:: improve performance (enable nfs, for each synced folder)
		:: Vagrantfile << config.vm.synced_folder "/LocalPath/" "/RemotePath/", :nfs => true
		:: not work with windows hosts!!!

	+--> Networking
		:: defualt: VM only accessible from host
		:: bridge our VM to private network so external machines can use the services provided by VMs (on the shared internal network)

		:: Vagrantfile << config.vm.network :private_network, ip: "192.168.1.100"

	+--> Auto-Running commands
		:: turning basic VM with OS into a server
		:: requirements:
		:: 	SSH
		::  Puppet
		::  Chef
	---> Post instalation Tasks:
		:: Run directly form vagrantfile -->
		:: Vagrantfile << config.vm.provision :shell, :inline => "sudo apt-get update"
		:: Run particular script from /vagrant relative path
		:: Vagrantfile << config.vm.provision :shell, :path => "provision.sh"
		:: IDEA --> git clone whatever
		::		--> run!!!

	+-->
		:: 



Chapt3:
	Provisioning with Puppet

	+--> Tool that manage to
	Virtualization
	Provisioning :: Tunning a machine, automates the process turning a base machine into one which is configured for use with specific project
		1) How Puppets works
		2) Basics behind the puppet Modules & Manifests
		3) Perform the following Tasks
			- Install software
			- Manage files and folders within the filesystem
			- Manage cron jobs
			- Run Commands
			- Manage users and groups
		4) How to use third party Puppet modules and Puppet Forge
		5) How to manuallt run Puppet to provision a machine

	+--> Provisioning
		Setting up Vmachine
			: install software
			: config software
			: manage services, running || deamons
			: setup user & groups

		Web Based Software
			: web server 
			: programming language
			: database system

		vanilla install ???
			: when not customized from its original form, meaning that its used without any customizations or updates applied to it.

	+--> Creating modules and manifest with Puppet
		# property : 
			idempotent: running once same as multiple times
		class apache {
			...		raw package withouth class also possible
			package { "apache2":
				ensure => present,
				require => Exec['apt-get update']
			}
			... 
			supervisor::service {
				email':
				ensure
				 => present,
				enable
				 => true,
				command
				 => '/usr/bin/php /vagrant/src/private/index.php
				email',
				user
				 => 'root',
				group
				 => 'root',
				autorestart => true,
				startsecs => 0,
				num_procs => 5,
				require
				 => [ Package['php5-cli'], Package['beanstalkd'] ]; # resource requirements
			}
			... supervisor invoke any number of processes, serialized workers

			cron: To manage cron jobs on Linux and UNIX based systems
			exec: To run commands at the terminal/command prompt
			file: To manage and manipulate files and folders on the filesystem
			group: To manage user groups
			package: apt-get install To install software
			service: To manage running services on the machine
			user: To manage user accounts on the machine
			shedule_task: To run taks in windows
		}

		--> include the declared class
			import "apache"
			include apache
		--> resource execution order
			stage { 'first' : before => Stage[main] }
			class { 'apache' : stage => first }
	---> Default Puppet manifests
		*** etc

	---> Installing Software with Puppets
		1) Update our package manager
			Exec --> within a Puppet
			exec { 'apt-get update':
				command => '/usr/bin/apt-get update',
				timeout => 0
			}
		2) Install the Apache package
			package { "apache2":
				ensure => present,
				require => Exec['apt-get update']
			}
		3) Run the Apache service
			service { "apache2":
				ensure => running,
				require => Package['apache2']
			}

	---> File management
		Copy files
		Create symlinks
		Create folders
		Create multiple folders in one go

		--> Copying a file
			file { '/etc/apache2/sites-available/default':
				source => '/vagrant/provision/modules/apache/files/default',
				owner => 'root',
				group => 'root',
				require => Package['apache2']
			}
		--> Creating a symlink
			file { '/var/www/vendor':
				ensure => 'link',
				target => '/vagrant/vendor',
				require => Package['apache2']
			}
		--> Creating folders
			file{ "/var/www/uploads":
				ensure => "directory",
				owner => "www-data",
				group => "www-data""
				mode
				 => 777,
			}
		--> Multiple Folders in one go
			$cache_directories = [ 
			"/var/www/cache/", 
			"/var/www/cache/pages",
			"/var/www/cache/routes", 
			"/var/www/cache/templates",
			]

			file { $cache_directories:
				ensure => "directory",
				owner => "w"w-data",
				group => "www-data",
				mode => 777,
			}
		--> Cron Management
			cron { 
			web_cron:
				command => "/usr/bin/php /vagrant/cron.php",
				user => "root",
				hour => [1-4],
				minute => [0,30],
			}
		--> Running commands
			exec{ 
			"compose":
				command => '/bin/rm -rfv /var/www/repo/vendor/* && /bin/rm –f
				/var/www/repo/composer.lock && /usr/bin/curl –s
				http://getcomposer.org/installer | /usr/bin/php && cd
				/var/www/repo && /usr/bin/php /var/www/repo/composer.
				phar install',
				require => [ Package['curl'], Package['git-core'] ],
				creates => "/var/www/repo/composer.lock",
				timeout => 0
			}
		--> Managing users and groups
		--> Creating groups
			group { "wheel":
				ensure => "present",
			}
		--> Creating users
			user { 
			"developer":
				ensure => "present",
				gid => "wheel",
				shell => "/bin/bash",
				home => "/home/developer",
				managehome => true,
				password => "passwordtest",
				require => Group["wheel"]
			}
		--> Updating the sudoers file
			exec { 
			"/bin/echo \"%wheel ALL=(ALL) ALL\" >> /etc/sudoers":
				require => Group["wheel"]
			}
		--> Subscribe and refresh only
			exec { 
			"reload-apache2":
				command => "/etc/init.d/apache2 reload",
				refreshonly => true,
				subscribe => File['/etc/apache2/sites-available/default'],
			}

++++++ --> Puppet Modules :: http://forge.puppetlabs.com/

	Using Puppet to provision servers
		puppet apply --modulepath=/home/michael/provision/modules
			4/home/michael/provision/manifests/default.pp



Chapt4:	Chef , skipped




Chapt5: Provisioning with Vagrant using Puppet and Chef
	Using Puppet within Vagrant

	Provisioning within Vagrant
	Provisioning with Puppet on Vagrant
		: support method :
			a) Standalone mode : Puppet.apply on the VM
				config.vm.provision :puppet do |puppet|
					puppet.manifests_path = "provision/manifests"
					puppet.manifest_file = "default.pp"
					puppet.module_path = "provision/modules"
				end
			b) client/server mode : Config/From server
	Using Puppet in a standalone mode
		: Vagrantfile << config.vm.provision :puppet
				config.vm.provision :puppet_server do |puppet|
					puppet.puppet_server = "puppet.internal.michaelpeacock.co.uk"
					puppet.puppet_node = "vm.internal.michaelpeacock.co.uk"
				end

	Using multiple provisioners on a single project
		Vagrant.configure("2") do |config|
			Config.vm.box = "precise64"
			config.vm.provision :shell, :inline => "apt-get update"
			config.vm.provision :puppet do |puppet|
				puppet.manifests_path = "provision/manifests"
				puppet.manifest_file = "default.pp"
				puppet.module_path = "provision/modules"
			end
		end


Chapt6: Working with Multiple Machines
	# Vagrant can run several instances of a machine in the same time
		-> Multi machine architecture & distributed systems
	# how to custom each instance with:	
		-> Name
		-> IP @ on a private network, full mesh communication
		-> Base boxes
		-> Provisioning
		-> Shared folders
	# Connect each other SSH, without knowing IP

	# Using multiple machines with Vagrant

	+--> Define multiple machine
		config.vm.define :name_of_the_vm do |name_of_the_vm|
			#configuration specific to the virtual machine
		end
	:: Sample with 2 VM -> server1 & server2
		Vagrant.configure("2") do |config|
			config.vm.define :server1 do |server1|
				server1.vm.box = "precise64"
			end
			config.vm.define :server2 do |server2|
				server2.vm.box = "precise64"
			end
		end

	:: Connecting to multiple VM over SSH
		Vagrant auto assigne to each VM a pseudo-random port to Host
		:: 22 --> 2222 ,  22 --> 2200


	:: Connecting from host to x VM
		:: ssh vagrant@localhost -p2200
		:: ssh vagrant@localhost -p2222
			:: yes -> default passwd : vagrant

	:: Networking multiple VM
		:: TODO -> prerequisite
		:: predefine IP @, check the virtual net range
		:: findout the subnet domain range

		# -*- mode: ruby -*-
		# vi: set ft=ruby :
		Vagrant.configure("2") do |config|
			config.vm.define :server1 do |server1|
				server1.vm.box = "precise64"
				server1.vm.network :private_network, ip: "10.11.1.100"
			end
			config.vm.define :server2 do |server2|
				server2.vm.box = "precise64"
				server2.vm.network :private_network, ip: "10.11.1.101"
			end
		end

		:: inet addr:10.0.2.15  Bcast:10.0.2.255  Mask:255.255.255.0
		:: acceder al vagrant VM
		:: vagrant ssh vmHostName

Chapt7: Creating Your Own Box
	-> Box Source: http://www.vagrantbox.es/
	-> Doc Source:  http://docs-v1.vagrantup.com/v1/docs/base_boxes.html
	-> Sample 	
		Ubuntu Server 13.4 64bit

	# Install it to VBox :: Using the ISO file
	•	 Hostname: vagrant-ubuntu-raring
	•	 Domain: vagrantup.com
	•	 Root password: vagrant
	•	 Main account username: vagrant
	•	 Main account password: vagrant

	# VirtualBox Guest Additions
	apt-get update
		-> shared folder 
		-> network integration


		step0:	
			Devices.Install Guess Additions (Host + D)
		step1: // load prerequisites
			sudo apt-get install linux-headers-$(uname -r) build-essential
		step2: // mount the cd to folder
			sudo mount /dev/cdrom /media/cdrom
		step3: // install it
			sudo sh /media/cdrom/VBoxLinuxAdditions.run

	# Vagrant Authentication
		-> vagrant user and admin group
			sudo groupadd admin
			sudo usermod -a -G admin vagrant
		-> Sudoers file
			visudo
			add to top
			Defaults env_keep="SSH_AUTH_SOCK"
			add to bottom 
			%admin ALL=(ALL) NOPASSWD: ALL
			add comment to, no interface
			#Defualt requiretty  
		-> Insecure public/private key pair
			nano ~/.ssh/authorized_hosts
				:: copy the content of the publick key and put it into the server
			wget file -o destAppend
			wget https://raw.github.com/mitchellh/vagrant/master/keys/vagrant.pub 
				–o ~/.ssh/authorized_hosts
			chmod 0644 ~/.ssh/authorized_keys
		-> Puppet
			sudo apt-get install puppet
	# Cleanup
			// before packaging Vagrant base box
			// have to cleanup some of the files we used
			rm -rf /tmp/*
			sudo apt-get clean

			// vagrant package --base vagrant-ubuntu-raring

	# Export
		-> vagrant package --base vagrant-ubuntu-raring



########################################################################################

getting started vagrant project with LAMP stack





# VirtualBox Procedure Manager

:: List running machines
VBoxManage list runningvms
:: Stop running machines by hibernate
VBoxManage controlvm <name|uuid> savestate
:: Poweroff running machines
VBoxManage controlvm <name:uuid> poweroff
:: recompended for ACPI-aware guest OS
VBoxManage controlvm <name:uuid> acpipowerbutton


























































	++ Tipo de implementatción :> 
		tiempo real... muy malo
		post script... buenisimo

	4















Puppet -- Contenedora para Maquinas Virtuales

es una herramienta de gestion de la configuracion de codigo abierto. Ruby, el proposito es una herramienta diseñada para administrar la configuracion de sistemas similares a Unix y a MS windows de forma declarativa.
El usuario describe los recursos del systema y sus estados utilizando el lenguaje declarativo que proporciona puppet (JSON).
Esta inforamcion es almacenada en archivos denominados manifiestos puppet. puppet describe la informacion del sistema a traces de una utilidad llamada facter, ya compila los manifiestos en un ctalago especifico del sistema que contiene lso recursos y la dependencia de dichos recursos, estos catalogos son ejecutados en los sitemas de destino.


Vagrant -- Infrastrutura, Custer de Maquinas Virtuales


Es una herramient para la creacion y configuracion de entornos de desarollo virtualizados. Originalment se desarollo para virtualbox ys sistemas de configuracion tales como chef, salt, puppet

# actualment es capaz de trabajar con VMware & Amazon & EC2 & LXC

vagrant is developed with ruby
--> todo getting started with ruby..

# goal:
	reduce the workload necessary to run and operate a virtual machine
	simple comand line interface
	support & interoperability
	solftawre configuration... Puppet
	faciliites procedures to distribute and share virtual environments

>vagrant up
	:: automatically download and install