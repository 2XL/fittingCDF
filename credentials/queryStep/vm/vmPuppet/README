

# Introduction to Puppet
For a list of all the way technology has failed to improve the quality of life, pease press three.




Chapter 1)

# Configuration Management
	# installing software
	# licensing it
	# configuring it
	# setting password

@ A day in the life of a sysadmin
	setting up a server for a dot.com
	-> add some user accounts and password
	-> config security settings and privileges
	-> install all the packages needed to run the app
	-> custom the config files for each of these packages
	-> create databases and databse user accounts, load some initial data
	-> config the services that should be running
	-> deploy the dot.com app
	-> add some necesary files: uploaded cat dot pics
	-> config machine for monitoring.
	-> ### what i have to do now is exactly the same procedure!
@ Kepping Configuration syncronized
	artisan server crafting
@ Repeating changes across many servers
@ Self-updating documentation
@ Coping with different platforms
@ Version control and history
	-> going back in time!
@ Solving the problem
	-> Reinventing the wheel: configuration management, each sysadmin does it and maybe even several times and several ways
@ A waste of effort
	-> Template language, and another does the same task why double the options rather that increase the features and the performance of existing solutions?
@ Transferable skills
	-> Its not important which one you choose, as long as you choose one.

@ Infrastructure as code
	# Ruby or Java
		: powerful editing and refactoring tools
		: version control
		: tests
		: pair programming
		: code reviews

	# Devs & Ops => DevOps
		development
		configuration
		convergnece of developers and system administrators

	# The Puppet Advantatge
		-> step by step sysadmin
			-> log in to server X
			-> Run the x script to do task X
			-> repeat for each server

		--> puppet detects what kind of operting system its handling and it performs the actions according the operating system
	# What is puppet?
		-> puppet itself is an interpreter that solve the problems letting u express how the servers should be configured in an standard way described by puppet, and makes config changes on a mahcine so that i conforms to your specification

		code syntax:
			package { "packagename":
				ensure => "it should be installed or whatever"
			}

			user { "username"
				ensure => "it is present"
			}

			-> we dont give order or commands to the puppet master, rather than that de describe how things should be... and let puppet to play the magic .pp is the puppet manifest

		describle resource and attributes with puppet:
			package
			files
			services
			users
			groups
			yum repos
			nagios config
			log messages
			/etc/hosts entries
			network interfaces
			ssh keys
			selinux settings
			kerberos config
			zfs attributes
			email aliases
			mailing lists
			mounted filesystems
			schedules jobs
			vlans
			solaris zones
			CUSTOM : resources not defined also able to do !! :D (no limit)
	@Summary
		configuration management is a tedious task, and repetitive, error prone and doesnt scale well, puppet is a tool for automating this process 
		you describe your configuration in terms of resources such as packages and files this description is called manifests


	@what puppet does, when puppet runs on a computer it compares the current configuration to the manifest it will take whatever actions are needed to change the machine so that it matches the manifest. because puppet manifest are code you can use a version manager the same way as other source code.



Chapt 2)
	First steps with Puppet

	Begining are such delivate times, 
	Frank Herbert, "Dune"


	learn how to install puppet, write your first manifest and how to use puppet to config a serve
	then understand how puppet read and applies a manifest.

	this book uses Precise64

	# what happens when we run puppet apply???

	1st:
		checks if the resource exists on the server. if not apply it!!
	2nd: 
		the first time run puppet, it will create for me
	3rd:
		for each it checks against the manifest what actually don't exists and then it fix it
	4th:
		if the file exists the file will be overwrited!!!
		# This file is managed by Puppet, any manual edits will be lost



	@Creating a nodes.pp file
		dealing with many machines, each with different configuration, which config belong to each machine

		#node declaration : 'node' : puppet term for an individual machine 'hostname'

	@If we apply manifest where the container has a import '*.pp' : type node
		the guest will only import the section where node is equal to the host name

	@Puppet doesn't really mind how you organize your manifests within files, you can ave everything within one big file HUGE.pp or split it into logical divisions TINY.pp
	the common approach is to keep Huge small just importing other manifest files


Chapt 3)
	Packages, Files and Services:
	It's not denial, I'm just selective about the reality I accept.
	 - Bill Watterson, "Calvin & Hobbes"

	 > most frequent to manage: 
	 	






































































































































































































































































































































































































































































































































































































































































































































































































































































#! Pupper Cookbook 3rd Edition





Chapt0: 

Computer language design is just like a stroll in the park. 
Jurassic Park, that is.
	Larry Wall


Chapt1: Puppet language and style
	Table of content
		Adding a resource to a node
		Using Facter to describe a node
		Installing a package before starting a service
		Installing, configuring, and starting a service
		Using community Puppet style
		Creating a manifest
		Checking your manifests with Puppet-lint
		Using modules
		Using standard naming conventions
		Using inline templates
		Iterating over multiple items
		Writing powerful conditional statements
		Using regular expression substitutions
		Using the future parser



